The general idea is to take shiftgen and implement two additional
potential perturbation modes: the continuum mode that corresponds
to the streaks or wave modes that are seen in code simulations, and
the second antisymmetric mode that might be the cause of the
narrowing of the shift eigenmode also observed in threshold
simulations of instability.

In principle all this involves is a calculation of the \Phi(z) values
for these different perturbations. And integrating it times the
equilibrium potential gradient to get corresponding force. Since this
is now done directly (without integration by parts) it ought to be
straightforward and can be added to the existing code.

However, the continuum mode for passing particles has the challenges
that it is of effectively infinite extent, and requires the correct
kparallel value (of the continuum) to be chosen. For high B, I think
this can be calculated from the magnetized langmuir wave dispersion
relation between kpar, kperp, and omega.

I think the infinite extent can be finessed by supposing that an
incoming particle moving from infinity to the edge of the hole region
gains essentially negligible f-perturbation (because the wave
amplitude rises slowly from zero at infinity). Therefore tilde f can
be taken as equal to minus the diabatic f-perturbation at the incoming
hole edge (e.g. x~=20) and simply integrated up over a finite
x-extent. Consequently its treatment is not really different from the
discrete mode except for the initial condition. It seems also from
the near identity of low kpar continuum modes in the inner region that
only really one continuum mode is required, and it won't matter much
what kpar value is chosen. In any case the simulations show that the
kpar is low, of order pi divided by the domain size.


19 Jan 2022
Fixed testshiftgen to remove all dependence on shiftgen as well as
some other bugs. This can now be used for testing an upgradeded
shiftgen that is able to use multiple modes.


11 Apr 2022
Looking into analytic form of trapped distribution.
In old shifgen git the first implementation was

commit 7c15b0b33cedd5304654d82b1278592592398484
Author: Ian Hutchinson <ihutch@mit.edu>
Date:   Fri May 31 15:59:06 2019 -0400

    Changed the trapped particle hole distribution from the beta
    approximate form of Schamel to the exact sinh^4 analytic solution
    expression.

I see nothing in log books relating to that.
The form is derived in an email from Xiang on 11 Nov 2018.

The prior commit was
commit 87257eece1b3316dafdbafbdc1726d12b470123d

The crucial diffs between these commits are
     beta=-1.-(15./16.)*sqrt(pi/psi) 
-!      beta=beta*(.8-.9/abs(beta))    ! Ad hoc correction density
-!      beta=beta*(1.-.75/abs(beta))    ! Ad hoc correction force.
     ! vy-arrays
     vymax=vymnorm*sqrt(Ty)
     dvy=vymax*2./(nvy-1.)                       ! vy-step
@@ -185,7 +183,8 @@ contains
     Ftotal=0.
     Wjprev=0.
     feprev=1/sqrt(2.*pi)
-    dfeprev=-beta*feprev*fperp
+!    dfeprev=-beta*feprev*fperp  ! Old Schamel approx
+    dfeprev=(15./(16.*sqrt(2.*psi))-1./sqrt(2.*pi))*fperp ! New exact analytic
     dfeperpprev=feprev*dfperpdWperp
     vpsiprev=sqrt(2.*psi)
     omegab(0)=0.
@@ -193,8 +192,14 @@ contains
     exptbprev=0.                  !Silence warnings
     do i=1,ne-1
        Wj=psi*(-(float(i)/ne)**iwpow)
-       fe=exp(-beta*Wj)/sqrt(2.*pi) ! Normalized f_\parallel
-       dfe=-beta*fe*fperp           ! df_||/dW_||
+       ! Old Schamel approximate form.
+!       fe=exp(-beta*Wj)/sqrt(2.*pi) ! Normalized f_\parallel
+!       dfe=-beta*fe*fperp           ! df_||/dW_||
+       ! New exact sech^4 hole form.
+       sqWj=sqrt(-Wj)
+       fe=((2./pi)*sqWj+(15./16.)*Wj/sqrt(psi)+experfcc(sqWj)/sqrt(pi))/sqrt(2.)
+       dfe=((15./16.)/sqrt(psi)-experfcc(sqWj)/sqrt(pi))/sqrt(2.)*fperp
+       ! End of choice
        dfeperp=fe*dfperpdWperp      ! df/dW_perp

26 Jun 2022
Found oscillating instability up to k=.68 psi=.15 using ocontgen. It has
a2/a4= -0.512987  0.148097   aq/a4=  0.072133 -0.052341
Eigenfrequency=       (0.123191133,1.939416048E-03)
Hence omega/sqrt(psi) = (0.3, 5e-3)
Required higher nge=600 to suppress "rounding" problems.
./ocontgen -k.6 -oc.68 -p.16 -or.15 -oi.02

Found modeshape of psi=.36 B=.40 PIC simulation. It is transverse mode 7
of
91,1,128,0,-32.,32.
92,1,128,0,-64.,64.  total length 128+> k=2pi/(127/7)=.346
Scaled values for this case:
are k/sqrt(psi)=.577, Omega/sqrt(psi)=.667
So try:
 ./ocontgen -k.5 -oc.67 -p.36 -or.15 -oi.02
 but that does not converge. So try
 ./ocontgen -k.6 -oc.67 -p.36 -or.15 -oi.02
still no good. Nor -k.4
 ./ocontgen -k.5 -oc.6 -p.36 -or.15 is close
 ./ocontgen -k.5 -oc.58 -p.36 -or.15 converges
 ./ocontgen -k.55 -oc.6 -p.36 -or.15  no.

Another simulation is psi=.16, B=.28, m=5, => k=.247, k/sqrtpsi=0.618.
Omega/sqrtpsi=.7
This might be useful in comparison with
./ocontgen -k.6 -oc.68 -p.16 -or.15 -oi.02
These numbers are very close.
These two are represented by
$ plottraces modeshape1628.plt totalmode1628.plt
That's probably as good as it's going to get.


Investigating high B.
Runs such as 
./ocontgen -k.2 -oc999 -or.035 -oi.0005
do find unequivocal M solutions but they have omega_i below the
shiftmode solutions, because of big changes to the zero real contour of
|M| relative to the zero imag contour of F-FE.

However, if one reduces the modes to just the discrete by setnmd(2).
Then the solution reverts to the shifmode omega. And
 Ftmdsum  <4|                  <2|                   <q|
 (   0.01000   0.00000) (   0.00160  -0.00046) (   0.00000   0.00000)
 (   0.00162  -0.00045) (   0.00934   0.00280) (   0.00000   0.00000)
 (   0.00000   0.00000) (   0.00000   0.00000) (  -1.66911   0.00036)
 dispM    <4|                  <2|                   <q|
 (  -0.00000   0.00000) (   0.00160  -0.00046) (   0.00000   0.00000)
 (   0.00162  -0.00045) (  -0.75066   0.00280) (   0.00000   0.00000)
 (   0.00000   0.00000) (   0.00000   0.00000) (  -1.66911  -0.45171)
Determinant= -0.348791E-08 -0.435534E-09
Checked to make sure determinant was being calculated properly. It was.

Now the imag(M) contour coincides with the imag(F-FE) zero contour up
to near the shiftmode contour peak, then moves higher. The real M
contour is vertical on top of the real F-FE contour. Note that these
are swapped, presumably because the qq entry is dominantly imaginary.
I think the fact that the qq coefficient is complex introduces a
phase factor into the value of ||M|| that is the main reason the
contours differ. Maybe one should make the argument of |M| equal
to the argument of its 44 coefficient for plotting: multiply M by
conjg(M)/abs(M)*44/abs(44). Or maybe zero
the argument of qq (multiply by conjg(qq)/abs(qq)).
Does not work well to use an argument correction locally.
I think we would need to use a single angle rotation for the entire
contour plot. Using the average of DetPhase sort of works for
the intermediate field regime, but is not good for high B. 

I conclude: the major effect is from the q-mode, and its coupling.

Got going a shiftgen version that can skip mode 2. It confirms that
the main effect is the q mode coupling. Found that rotating the
third row so that dispM is real makes the M contours mimic the
forcetotal contours, so it is easier to understand.

One can reverse the effect of q by reversing the sign of dispM(3,3)
in calculating the determinant, giving a destabilizing q-contribution.
Therefore one needs to think hard about that third row's signs

14 July 2022

Had considerable trouble creating a new repo on github
Password direct access is now disallowed. git@github.com access via
ssh is allowed. However, when I succeeded with that, I got an error
message saying that the branch main could not be deleted. I found a new
configuration had been created on github where main was the default
branch, and master auxmodeversion ... were other branches. main was
empty of course. Eventually I found by clicking far right on main that
there was a way to change the default to master, and then delete the
main branch. It seems to have been the way the new repo was created
that was the problem. 

6 Aug 2022
Found a sign error in the continuum mode expression. Tiny error at
small p but noticeable when p is not small. This affected the
continmodez.f90 codes and I rewrote as asymmodes.f90, but also
subroutine mdofz. Need to rerun the plots. 